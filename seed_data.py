#!/usr/bin/env python3
"""
Script pour ajouter des donn√©es de test √† la base de donn√©es
"""

from sqlalchemy.orm import Session
from database import SessionLocal, engine
import models
import schemas

def create_sample_products():
    """Cr√©er des produits d'exemple"""
    db = SessionLocal()
    
    # V√©rifier si des produits existent d√©j√†
    if db.query(models.Product).first():
        print("Des produits existent d√©j√† dans la base de donn√©es.")
        db.close()
        return
    
    sample_products = [
        {
            "name": "Laptop Gaming Pro",
            "description": "Ordinateur portable haute performance pour le gaming",
            "price": 1299.99,
            "stock_quantity": 10,
            "category": "Informatique",
            "image_url": "/static/images/laptop.jpg"
        },
        {
            "name": "Smartphone Android",
            "description": "Smartphone derni√®re g√©n√©ration avec cam√©ra 108MP",
            "price": 699.99,
            "stock_quantity": 25,
            "category": "T√©l√©phonie",
            "image_url": "/static/images/smartphone.jpg"
        },
        {
            "name": "Casque Bluetooth",
            "description": "Casque sans fil avec r√©duction de bruit active",
            "price": 199.99,
            "stock_quantity": 50,
            "category": "Audio",
            "image_url": "/static/images/headphones.jpg"
        },
        {
            "name": "Montre Connect√©e",
            "description": "Montre intelligente avec suivi de sant√©",
            "price": 299.99,
            "stock_quantity": 30,
            "category": "Wearables",
            "image_url": "/static/images/smartwatch.jpg"
        },
        {
            "name": "Tablette Graphique",
            "description": "Tablette pour dessin num√©rique et design",
            "price": 449.99,
            "stock_quantity": 15,
            "category": "Informatique",
            "image_url": "/static/images/tablet.jpg"
        },
        {
            "name": "Enceinte Bluetooth",
            "description": "Enceinte portable avec son st√©r√©o",
            "price": 89.99,
            "stock_quantity": 40,
            "category": "Audio",
            "image_url": "/static/images/speaker.jpg"
        }
    ]
    
    for product_data in sample_products:
        product = models.Product(**product_data)
        db.add(product)
    
    db.commit()
    print(f"‚úÖ {len(sample_products)} produits ajout√©s √† la base de donn√©es")
    db.close()

def create_sample_user():
    """Cr√©er un utilisateur de test"""
    from auth import get_password_hash
    
    db = SessionLocal()
    
    # V√©rifier si un utilisateur existe d√©j√†
    if db.query(models.User).first():
        print("Des utilisateurs existent d√©j√† dans la base de donn√©es.")
        db.close()
        return
    
    user_data = {
        "email": "admin@ecommerce.com",
        "password": get_password_hash("admin123"),
        "first_name": "Admin",
        "last_name": "E-commerce"
    }
    
    user = models.User(**user_data)
    db.add(user)
    db.commit()
    print("‚úÖ Utilisateur admin cr√©√© (email: admin@ecommerce.com, mot de passe: admin123)")
    db.close()

if __name__ == "__main__":
    print("üå± Ajout de donn√©es de test...")
    
    # Cr√©er les tables
    models.Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables de base de donn√©es cr√©√©es")
    
    # Ajouter les donn√©es de test
    create_sample_products()
    create_sample_user()
    
    print("üéâ Donn√©es de test ajout√©es avec succ√®s !")
    print("\nüìù Informations de connexion:")
    print("   Email: admin@ecommerce.com")
    print("   Mot de passe: admin123")
